function [poseList] = loadPoseList(varargin)
% LOADPOSELIST Loads the specified pose list and checks for valid format
%  
%   poseList = LOADPOSELIST(fileNameOrPath) will load a specified list of
%   pose command generated by WireCenter so they can be used as input to
%   the numeric control of the simuatlion environment.
%   
%   Usually, you would want the pose list data to contain values for the
%   fields [x, y, z, R_11, R_12, R_13, R_21, R_22, R_23, R_31, R_32, R_33],
%   however, it may also contain more data than that. In the latter case, a
%   list dialog will appear requiring you to select the columns which
%   contain information for the above mentioned columns (in that particular
%   order). Clicking 'Cancel' in that case will stop the import process.
%   
%   Data formats supported are .txt and .csv with .csv supported with or
%   without a header row.
%   
%   CSV: If the .csv file has a header row, loadPoseList will automatically
%   extract the variables required, if it cannot find any of the required
%   variables, an exception will be thrown. If the csv file does not
%   contain a header row, loadPoseList will again open a list dialog
%   requiring user input to select the columns that contain the required
%   variables. Again, make sure the order of variables is as required.
%   
%   TXT: Blank text files are supported as well with the same restrictions
%   as for .csv files. If the number of columns equals the number of
%   required columns, data will be extracted automatically, otherwise a
%   list dialog is displayed that will require you to select the columns
%   with the variables required.


%% AUTHOR       : Philipp Tempel <philipp.tempel@isw.uni-stuttgart.de>
%% DATE         : 2014-01-14
%% REVISION     : 1.1.1
%% DEVELOPED    : 8.2.0.701 R2013b
%% FILENAME     : loadPoseList.m
%% HISTORY
%   2014-02-28  * Add parameter 'time' to extractVariables and replace
%               every occurence of 12 by numel(extractVariables)
%   2014-02-12  * Update thrown exceptions to use sprintf-like arguments
%   2014-01-27  * Add "uigetfile" when no "fileNameOrPath" is provided
%   2014-01-16  * Update the "else" part of the if <> else section for when
%               no csv file is loaded the variable poseList will be filled
%               with content of loaded (as long as size(loaded, 2) == 12
%   2014-01-14  * File created, full description at top
%%-------------------------------------------------------------------------


%% Some variables we need throughout the script
% rootDirectory       = pwd;
supportedExtensions = {'.csv' '.txt'};
extractVariables    = {'time', 'x', 'y', 'z', 'R_11', 'R_12', 'R_13', 'R_21', 'R_22', 'R_23', 'R_31', 'R_32', 'R_33'};


%% Determine validity of the provided data in fileNameOrPath

% Let's check the filename given is a fully qualified filename or not
if nargin == 0
    [fileName, filePath] = uigetfile({'*.csv'; '*.txt'});
    
    if 0 == fileName
        throw(MException('PHILIPPTEMPEL:importPoseList:fileimportCanceled', 'Fileimport canceled becase file dialog was closed'));
    end
    
    fileNameOrPath = fullfile(filePath, fileName);
else
    fileNameOrPath = varargin{1};
end

[filePath, fileName, fileExt] = fileparts(fileNameOrPath);

% If there's no path found, we will make the filename a fully qualified
% filepath by assuming it is located within rootDirectory (which is in fact
% our current working directory)
if isempty(filePath)
    filePath = pwd;
end

% This script allows for importing '.csv' and '.txt' files, so we will
% check for either one. But first, determine whether there's a file
% extension to filename
if isempty(fileExt)
    for iExt = 1:numel(supportedExtensions)
        if exist(fullfile([fileNameOrPath, supportedExtensions{iExt}]), 'file')
            fileExt = supportedExtensions{iExt};
            
            break;
        end
    end
% The provided file has a file extension, so let's check that value
else
    % If the value of fileExt is not a member of the cell array
    % supportedExtensions it means we are having us an unsupported file
    % extension
    if isempty(find(ismember(supportedExtensions, fileExt), 1))
        throw(MException('PHILIPPTEMPEL:importPoseList:invalidFileExtension', 'Unsupported file extension ''%s'' found. Please consider exporting as any of the following formats: %s', fileExt, strjoin(supportedExtensions, ', ')));
    end
end

qualifiedFile = fullfile(filePath, [fileName, fileExt]);

% Finally, check the given file really exists
if ~exist(qualifiedFile, 'file')
    throw(MException('PHILIPPTEMPEL:importPoseList:fileNotFound', 'Could not find any valid pose list file named ''%s''', strrep(fileName, '\', '\\')));
end



%% All good to go
% Load the file into loaded
% loaded = load(qualifiedFile);
[loaded, delimiterOut, headerlinesOut] = importdata(qualifiedFile);
% Now starts the tricky part, examining the data of loaded.

% Did importdata detect header lines? If so, then loaded is a struct and
% loaded.data contains the pose list
if headerlinesOut ~= 0
    % Trim potential white spaces from the column headers
    loaded.colheaders = strtrim(loaded.colheaders);
    
    % Initiate the pose list as an empty array of size (number of steps of
    % the NC program) x numel(extractVariables)
    poseList = zeros(size(loaded.data, 1), numel(extractVariables));
    
    % Let's loop over all variables to extract and see if we can find them
    % inside the loaded data.
    for iExtractVariable = 1:numel(extractVariables)
        if ismember(extractVariables(iExtractVariable), loaded.colheaders)
            poseList(:, iExtractVariable) = loaded.data(:, strcmp(loaded.colheaders, extractVariables(iExtractVariable)));
        end
    end
    
% No header lines detected, so the pose list might have some weird layout.
% If the layout is not (something by numel(extractVariables)) columns, we will ask the user to
% select which columns have [x, y, z, R_11, R_12, R_13, R_21, R_22, R_23,
% R_31, R_32, R_33]
else
    if size(loaded, 2) ~= numel(extractVariables)
        % Make a nice list dialog displaying the columns that can be
        % selected for lodaing the required data
        [columns, ok] = listdlg('ListString', {num2str((1:1:size(loaded, 2))')}, ...
            'PromptString', 'Select columns to load', ...
            'SelectionMode', 'multiple', ...
            'OKString', 'Load selected');
        
        % Got OK i.e. a selection?
        if ok
            poseList = loaded(:, columns);
        else
            error('Import canceled');
        end
    else
        poseList = loaded;
    end
end

% Finally, check we have the valid size which is an array of (number of
% steps) rows and numel(extractVariables) columns
if size(poseList, 2) ~= numel(extractVariables)
    throw(MException('PHILIPPTEMPEL:importPoseList:invalidDataFormat', 'Provided data has invalid count of columns. It should have %i columns but instead has %i columns', numel(extractVariables), size(poseList, 2)));
end
