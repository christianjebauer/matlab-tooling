function [ns, t] = available_targets(ct)
%% AVAILABLE_TARGETS 
%
% Inputs:
%
%   CT                  Structure of coder types
% 
% Outputs:
%
%   NS                  Namespace of package.
%
%   T                   Struct array with field names as function names and
%                       field value the respective build arguments.



%% File information
% Author: Philipp Tempel <philipp.tempel@ls2n.fr>
% Date: 2021-10-21
% Changelog:
%   2021-10-21
%       * Initial release




%% Parse arguments

% AVAILABLE_TARGETS()
narginchk(1, 1);

% [NS, T] = AVAILABLE_TARGETS()
nargoutchk(2, 2);



%% Quaternion

quaternion = struct();

quaternion.quat2rotm = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quat2rotm') ...
  , 'quat2rotm' ...
  , '-args', { ...
    ct.quaternion ...
  } ...
  , '-args', { ...
    ct.quaternions ...
  } ...
);

quaternion.quatconj = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatconj') ...
  , 'quatconj' ...
  , '-args', { ...
    ct.quaternion ...
  } ...
  , '-args', { ...
    ct.quaternions ...
  } ...
);

quaternion.quatnorm = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatnorm') ...
  , 'quatnorm' ...
  , '-args', { ...
    ct.quaternion ...
  } ...
  , '-args', { ...
    ct.quaternions ...
  } ...
);

quaternion.quatnormalized = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatnormalized') ...
  , 'quatnormalized' ...
  , '-args', { ...
    ct.quaternion ...
  } ...
  , '-args', { ...
    ct.quaternions ...
  } ...
);

quaternion.quatinv = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatinv') ...
  , 'quatinv' ...
  , '-args', { ...
    ct.quaternion ...
  } ...
  , '-args', { ...
    ct.quaternions ...
  } ...
);

quaternion.quatrand = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatrand') ...
  , 'quatrand' ...
  , '-args', { ...
  } ...
  , '-args', { ...
    ct.n ...
  } ...
);

quaternion.quatadd = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatadd') ...
  , 'quatadd' ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternions ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternions ...
  } ...
);

quaternion.quatsub = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatsub') ...
  , 'quatsub' ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternions ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternions ...
  } ...
);

quaternion.quatmul = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatmul') ...
  , 'quatmul' ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternions ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternions ...
  } ...
);

quaternion.quatdiv = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatdiv') ...
  , 'quatdiv' ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternions ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternions ...
  } ...
);

quaternion.quatmat = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quatmat') ...
  , 'quatmat' ...
  , '-args', { ...
      ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternions ...
  } ...
);

quaternion.quat2rotmdiff = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'quaternion')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'quaternion')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'quaternion')), 'quat2rotmdiff') ...
  , 'quat2rotmdiff' ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternion ...
  } ...
  , '-args', { ...
      ct.quaternion ...
    , ct.quaternions ...
  } ...
  , '-args', { ...
      ct.quaternions ...
    , ct.quaternions ...
  } ...
);



%% Math

math = struct();

math.ang2rotm = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'mat')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'mat')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'mat')), 'rot2') ...
  , which('ang2rotm') ...
  , '-args', { ...
  } ...
  , '-args', { ...
      ct.scalar ...
  } ...
  , '-args', { ...
      ct.col ...
  } ...
  , '-args', { ...
      ct.row ...
  } ...
);

% math.vec2d2skew = @(cfg, basedir) codegen( ...
%   '-config', cfg ...
%   , '-I', ensuredir(fullfile(basedir, 'src', 'math')) ...
%   , '-d', ensuredir(fullfile(basedir, 'codegen', 'math')) ...
%   , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'math')), 'vec2d2skew') ...
%   , 'vec2d2skew' ...
%   , '-args', { ...
%       ct.vec2d ...
%   } ...
%   , '-args', { ...
%       ct.vecs2d ...
%   } ...
% );

math.skew2vec = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'math')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'math')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'math')), 'skew2vec') ...
  , which('skew2vec') ...
  , '-args', { ...
      ct.rotmat3 ...
  } ...
  , '-args', { ...
      ct.rotmats3 ...
  } ...
);

math.rotx = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'mat')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'mat')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'mat')), 'rotx') ...
  , which('rotx') ...
  , '-args', { ...
      ct.scalar ...
  } ...
  , '-args', { ...
      ct.col ...
  } ...
  , '-args', { ...
      ct.row ...
  } ...
);

math.roty = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'mat')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'mat')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'mat')), 'roty') ...
  , which('roty') ...
  , '-args', { ...
      ct.scalar ...
  } ...
  , '-args', { ...
      ct.col ...
  } ...
  , '-args', { ...
      ct.row ...
  } ...
);

math.rotz = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'mat')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'mat')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'mat')), 'rotz') ...
  , which('rotz') ...
  , '-args', { ...
      ct.scalar ...
  } ...
  , '-args', { ...
      ct.col ...
  } ...
  , '-args', { ...
      ct.row ...
  } ...
);

math.rot2 = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'mat')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'mat')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'mat')), 'rot2') ...
  , which('rot2') ...
  , '-args', { ...
  } ...
  , '-args', { ...
      ct.scalar ...
  } ...
  , '-args', { ...
      ct.col ...
  } ...
  , '-args', { ...
      ct.row ...
  } ...
);

math.vec2skew = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'math')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'math')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'math')), 'vec2skew') ...
  , which('vec2skew') ...
  , '-args', { ...
      ct.vec3d ...
  } ...
  , '-args', { ...
      ct.vecs3d ...
  } ...
);



%% Matrix

mat = struct();

mat.rotm2rotv = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'mat')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'mat')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'mat')), 'rotm2rotv') ...
  , which('rotm2rotv') ...
  , '-args', { ...
      ct.rotmat3 ...
  } ...
  , '-args', { ...
      ct.rotmat3 ...
    , ct.scalar ...
  } ...
);

mat.rotv2rotm = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'mat')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'mat')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'mat')), 'rotv2rotm') ...
  , which('rotv2rotm') ...
  , '-args', { ...
      ct.rotvector ...
  } ...
  , '-args', { ...
      ct.rotvector ...
    , ct.scalar ...
  } ...
);

mat.rotv = @(cfg, basedir) codegen( ...
  '-config', cfg ...
  , '-I', ensuredir(fullfile(basedir, 'src', 'mat')) ...
  , '-d', ensuredir(fullfile(basedir, 'codegen', 'mat')) ...
  , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'mat')), 'rotv') ...
  , which('rotv') ...
  , '-args', { ...
      ct.vec3d ...
    , ct.vec3d ...
  } ...
  , '-args', { ...
      ct.vec3d ...
    , ct.vec3d ...
    , ct.scalar ...
  } ...
);

% mat.matsplit = @(cfg, basedir) codegen( ...
%   '-config', cfg ...
%   , '-I', ensuredir(fullfile(basedir, 'src', 'mat')) ...
%   , '-d', ensuredir(fullfile(basedir, 'codegen', 'mat')) ...
%   , '-o', fullfile(ensuredir(fullfile(basedir, 'mex', 'mat')), 'matsplit') ...
%   , 'matsplit' ...
%   , '-args', { ...
%       ct.scalar ...
%   } ...
%   , '-args', { ...
%       ct.scalar ...
%     , ct.scalar ...
%   } ...
%   , '-args', { ...
%       ct.col ...
%   } ...
%   , '-args', { ...
%       ct.col ...
%     , ct.scalar ...
%   } ...
%   , '-args', { ...
%       ct.row...
%   } ...
%   , '-args', { ...
%       ct.row ...
%     , ct.scalar ...
%   } ...
%   , '-args', { ...
%       coder.newtype('double', [Inf, Inf], [1, 1]) ...
%   } ...
%   , '-args', { ...
%       coder.newtype('double', [Inf, Inf], [1, 1]) ...
%     , ct.scalar ...
%   } ...
%   , '-args', { ...
%       coder.newtype('double', [Inf, Inf, Inf], [1, 1, 1]) ...
%   } ...
%   , '-args', { ...
%       coder.newtype('double', [Inf, Inf, Inf], [1, 1, 1]) ...
%     , ct.scalar ...
%   } ...
% );



%% Build output arguments

% Namespace to use
ns = 'matlab';

% Collection of available targets
t = struct( ...
    'mat', mat ...
  , 'math', math ...
  , 'quaternion', quaternion ...
);


end

%------------- END OF CODE --------------
% Please send suggestions for improvement of this file to the original author as
% can be found in the header Your contribution towards improving this function
% will be acknowledged in the "Changelog" section of the header
